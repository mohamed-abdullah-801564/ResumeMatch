from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_JUSTIFY
from reportlab.lib import colors
from reportlab.lib.units import inch
from datetime import datetime
import io
from typing import Dict, List, Optional

class ResumeAnalysisReportGenerator:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()
    
    def setup_custom_styles(self):
        """Setup custom paragraph styles"""
        # Title style
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#2E86AB')
        )
        
        # Header style
        self.header_style = ParagraphStyle(
            'CustomHeader',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            textColor=colors.HexColor('#2E86AB'),
            leftIndent=0
        )
        
        # Score style
        self.score_style = ParagraphStyle(
            'ScoreStyle',
            parent=self.styles['Normal'],
            fontSize=24,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#A23B72'),
            spaceAfter=20
        )
        
        # Suggestion style
        self.suggestion_style = ParagraphStyle(
            'SuggestionStyle',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=8,
            leftIndent=15,
            bulletIndent=10
        )
        
        # Footer style
        self.footer_style = ParagraphStyle(
            'FooterStyle',
            parent=self.styles['Normal'],
            fontSize=9,
            alignment=TA_CENTER,
            textColor=colors.grey
        )
    
    def generate_report(self, analysis_result: Dict, suggestions: List[Dict], resume_filename: Optional[str] = None, job_title: Optional[str] = None) -> bytes:
        """Generate PDF report with analysis results"""
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
        
        # Build story
        story = []
        
        # Title
        story.append(Paragraph("Resume Match Analysis Report", self.title_style))
        story.append(Spacer(1, 20))
        
        # Report info
        info_data = []
        if resume_filename:
            info_data.append(['Resume File:', resume_filename])
        if job_title:
            info_data.append(['Job Position:', job_title])
        info_data.append(['Analysis Date:', datetime.now().strftime('%B %d, %Y')])
        info_data.append(['Generated by:', 'AI Resume Match Checker'])
        
        info_table = Table(info_data, colWidths=[1.5*inch, 4*inch])
        info_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ]))
        story.append(info_table)
        story.append(Spacer(1, 30))
        
        # Overall Score Section
        story.append(Paragraph("Overall Match Score", self.header_style))
        overall_score = analysis_result['overall_score']
        score_color = self._get_score_color(overall_score)
        score_text = f'<font color="{score_color}">{overall_score}%</font>'
        story.append(Paragraph(score_text, self.score_style))
        
        # Score interpretation
        interpretation = self._get_score_interpretation(overall_score)
        story.append(Paragraph(interpretation, self.styles['Normal']))
        story.append(Spacer(1, 20))
        
        # Detailed Breakdown
        story.append(Paragraph("Detailed Breakdown", self.header_style))
        breakdown_data = [
            ['Metric', 'Score', 'Assessment'],
            ['Technical Skills Match', f"{analysis_result['technical_score']}%", self._get_assessment(analysis_result['technical_score'])],
            ['Soft Skills Match', f"{analysis_result['soft_skills_score']}%", self._get_assessment(analysis_result['soft_skills_score'])],
            ['Keywords Matched', f"{analysis_result['total_matches']}/{analysis_result['total_job_keywords']}", 
             f"{round((analysis_result['total_matches']/max(analysis_result['total_job_keywords'], 1))*100, 1)}%"],
        ]
        
        breakdown_table = Table(breakdown_data, colWidths=[2*inch, 1*inch, 2.5*inch])
        breakdown_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2E86AB')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#F8F9FA')]),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
        ]))
        story.append(breakdown_table)
        story.append(Spacer(1, 25))
        
        # Missing Keywords Section
        if analysis_result['missing']['technical'] or analysis_result['missing']['soft_skills']:
            story.append(Paragraph("Missing Keywords & Skills", self.header_style))
            
            if analysis_result['missing']['technical']:
                story.append(Paragraph("Technical Skills:", self.styles['Heading3']))
                tech_keywords = list(analysis_result['missing']['technical'])[:10]
                tech_text = ", ".join(tech_keywords)
                story.append(Paragraph(tech_text, self.styles['Normal']))
                story.append(Spacer(1, 10))
            
            if analysis_result['missing']['soft_skills']:
                story.append(Paragraph("Soft Skills:", self.styles['Heading3']))
                soft_keywords = list(analysis_result['missing']['soft_skills'])[:8]
                soft_text = ", ".join(soft_keywords)
                story.append(Paragraph(soft_text, self.styles['Normal']))
                story.append(Spacer(1, 20))
        
        # Suggestions Section
        story.append(Paragraph("Personalized Improvement Suggestions", self.header_style))
        
        for i, suggestion in enumerate(suggestions, 1):
            # Handle both dict and string formats for suggestions
            if isinstance(suggestion, dict):
                suggestion_text = suggestion.get('text', '')
            else:
                # If suggestion is a string (fallback)
                suggestion_text = str(suggestion)
            
            # Clean up the text for PDF (remove markdown formatting)
            clean_text = suggestion_text.replace('**', '').replace('*', '')
            suggestion_para = Paragraph(f"{i}. {clean_text}", self.suggestion_style)
            story.append(suggestion_para)
        
        story.append(Spacer(1, 20))
        
        # Action Items
        story.append(Paragraph("Quick Action Items", self.header_style))
        action_items = self._generate_action_items(analysis_result)
        for item in action_items:
            action_para = Paragraph(f"â€¢ {item}", self.suggestion_style)
            story.append(action_para)
        
        story.append(Spacer(1, 30))
        
        # Footer
        footer_text = "This report was generated by AI Resume Match Checker. Use these suggestions as guidance to improve your resume's alignment with the job requirements."
        story.append(Paragraph(footer_text, self.footer_style))
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        return buffer.getvalue()
    
    def _get_score_color(self, score: float) -> str:
        """Get color based on score"""
        if score >= 70:
            return "#28a745"  # Green
        elif score >= 40:
            return "#ffc107"  # Yellow/Orange
        else:
            return "#dc3545"  # Red
    
    def _get_score_interpretation(self, score: float) -> str:
        """Get interpretation text for score"""
        if score >= 70:
            return "Excellent! Your resume shows strong alignment with the job requirements. You're well-positioned for this role."
        elif score >= 40:
            return "Good match with room for improvement. Your resume shows potential for this role with some targeted enhancements."
        else:
            return "Significant improvement needed. Consider tailoring your resume more closely to the job description to increase your chances."
    
    def _get_assessment(self, score: float) -> str:
        """Get assessment text for detailed breakdown"""
        if score >= 80:
            return "Excellent"
        elif score >= 60:
            return "Good"
        elif score >= 40:
            return "Fair"
        else:
            return "Needs Improvement"
    
    def _generate_action_items(self, analysis_result: Dict) -> List[str]:
        """Generate quick action items"""
        items = []
        
        if analysis_result['missing']['technical']:
            top_tech = list(analysis_result['missing']['technical'])[:3]
            items.append(f"Add these technical skills to your Skills section: {', '.join(top_tech)}")
        
        if analysis_result['missing']['soft_skills']:
            top_soft = list(analysis_result['missing']['soft_skills'])[:2]
            items.append(f"Highlight these soft skills in your Experience section: {', '.join(top_soft)}")
        
        if analysis_result['overall_score'] < 50:
            items.append("Review the job description and incorporate more specific terminology throughout your resume")
        
        if len(analysis_result['matches']['all']) > 0:
            items.append("Keep your existing relevant keywords prominent in your resume")
        
        items.append("Tailor your Professional Summary to better match the job requirements")
        
        return items[:5]  # Limit to 5 action items